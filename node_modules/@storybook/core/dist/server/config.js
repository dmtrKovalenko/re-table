'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _findCacheDir = require('find-cache-dir');

var _findCacheDir2 = _interopRequireDefault(_findCacheDir);

var _nodeLogger = require('@storybook/node-logger');

var _webpack = require('./config/defaults/webpack.config');

var _babel = require('./config/babel');

var _babel2 = _interopRequireDefault(_babel);

var _loadCustomBabelConfig = require('./loadCustomBabelConfig');

var _loadCustomBabelConfig2 = _interopRequireDefault(_loadCustomBabelConfig);

var _loadCustomWebpackConfig = require('./loadCustomWebpackConfig');

var _loadCustomWebpackConfig2 = _interopRequireDefault(_loadCustomWebpackConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noopWrapper = function noopWrapper(config) {
  return config;
};

function getBabelConfig(_ref) {
  var configDir = _ref.configDir,
      _ref$defaultBabelConf = _ref.defaultBabelConfig,
      defaultBabelConfig = _ref$defaultBabelConf === undefined ? _babel2.default : _ref$defaultBabelConf,
      _ref$wrapDefaultBabel = _ref.wrapDefaultBabelConfig,
      wrapDefaultBabelConfig = _ref$wrapDefaultBabel === undefined ? noopWrapper : _ref$wrapDefaultBabel,
      _ref$wrapBabelConfig = _ref.wrapBabelConfig,
      wrapBabelConfig = _ref$wrapBabelConfig === undefined ? noopWrapper : _ref$wrapBabelConfig;

  var defaultConfig = wrapDefaultBabelConfig(defaultBabelConfig);
  return wrapBabelConfig((0, _loadCustomBabelConfig2.default)(configDir, defaultConfig));
}

function mergeConfigs(config, customConfig) {
  return (0, _extends3.default)({}, customConfig, config, {
    // Override with custom devtool if provided
    devtool: customConfig.devtool || config.devtool,
    // We need to use our and custom plugins.
    plugins: [].concat((0, _toConsumableArray3.default)(config.plugins), (0, _toConsumableArray3.default)(customConfig.plugins || [])),
    module: (0, _extends3.default)({}, config.module, customConfig.module, {
      rules: [].concat((0, _toConsumableArray3.default)(config.module.rules), (0, _toConsumableArray3.default)(customConfig.module && customConfig.module.rules || []))
    }),
    resolve: (0, _extends3.default)({}, config.resolve, customConfig.resolve, {
      alias: (0, _extends3.default)({}, config.alias, customConfig.resolve && customConfig.resolve.alias)
    })
  });
}

function informAboutCustomConfig(defaultConfigName) {
  if (!defaultConfigName) {
    _nodeLogger.logger.info('=> Using default webpack setup.');
    return;
  }

  _nodeLogger.logger.info('=> Using default webpack setup based on "' + defaultConfigName + '".');
}

// `baseConfig` is a webpack configuration bundled with storybook.
// Storybook will look in the `configDir` directory
// (inside working directory) if a config path is not provided.

exports.default = function (options) {
  var configType = options.configType,
      getBaseConfig = options.getBaseConfig,
      configDir = options.configDir,
      defaultConfigName = options.defaultConfigName,
      _options$wrapInitialC = options.wrapInitialConfig,
      wrapInitialConfig = _options$wrapInitialC === undefined ? noopWrapper : _options$wrapInitialC,
      _options$wrapBasicCon = options.wrapBasicConfig,
      wrapBasicConfig = _options$wrapBasicCon === undefined ? noopWrapper : _options$wrapBasicCon,
      _options$wrapDefaultC = options.wrapDefaultConfig,
      wrapDefaultConfig = _options$wrapDefaultC === undefined ? noopWrapper : _options$wrapDefaultC;


  var babelOptions = (0, _extends3.default)({
    // This is a feature of `babel-loader` for webpack (not Babel itself).
    // It enables a cache directory for faster-rebuilds
    // `find-cache-dir` will create the cache directory under the node_modules directory.
    cacheDirectory: (0, _findCacheDir2.default)({ name: 'react-storybook' })
  }, getBabelConfig(options));
  var baseConfig = getBaseConfig((0, _extends3.default)({}, options, { babelOptions: babelOptions }));
  var config = wrapInitialConfig(baseConfig, configDir);

  var defaultConfig = wrapDefaultConfig((0, _webpack.createDefaultWebpackConfig)(config));

  // Check whether user has a custom webpack config file and
  // return the (extended) base configuration if it's not available.
  var customConfig = (0, _loadCustomWebpackConfig2.default)(configDir);

  if (customConfig === null) {
    informAboutCustomConfig(defaultConfigName);
    return defaultConfig;
  }

  if (typeof customConfig === 'function') {
    _nodeLogger.logger.info('=> Loading custom webpack config (full-control mode).');
    return customConfig(wrapBasicConfig(config), configType, defaultConfig);
  }

  _nodeLogger.logger.info('=> Loading custom webpack config (extending mode).');

  return mergeConfigs(config, customConfig);
};