{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\nimport appRoot from \"app-root-dir\"\n\nconst dotEnvBase = path.join(appRoot.get(), \".env\")\n\nif (!process.env.NODE_ENV) {\n  // Default to development as most solutions seems to implement.\n  // By explicitely setting it if not configured we are able to pass it\n  // to e.g. Webpack for compilation\n  process.env.NODE_ENV = \"development\"\n}\n\n// Cache Node environment at load time. We have to do it to make\n// sure that the serialization, which might happen later, is in sync\n// with the parsing of the conditional NODE_ENV files now.\nconst NODE_ENV = process.env.NODE_ENV\n\n// Either \"client\" or \"server\"\nconst BUILD_TARGET = process.env.BUILD_TARGET\n\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n// Don't include `.env.local` for `test` environment\n// since normally you expect tests to produce the same\n// results for everyone\nconst dotenvFiles = [\n  BUILD_TARGET && `${dotEnvBase}.${BUILD_TARGET}.${NODE_ENV}.local`,\n  BUILD_TARGET && `${dotEnvBase}.${BUILD_TARGET}.${NODE_ENV}`,\n  BUILD_TARGET && NODE_ENV !== \"test\" && `${dotEnvBase}.${BUILD_TARGET}.local`,\n  BUILD_TARGET && `${dotEnvBase}.${BUILD_TARGET}`,\n  `${dotEnvBase}.${NODE_ENV}.local`,\n  `${dotEnvBase}.${NODE_ENV}`,\n  NODE_ENV !== \"test\" && `${dotEnvBase}.local`,\n  dotEnvBase\n].filter(Boolean)\n\n// Load environment variables from .env* files. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set. Variable expansion is supported in .env files.\n// https://github.com/motdotla/dotenv\n// https://github.com/motdotla/dotenv-expand\ndotenvFiles.forEach((dotenvFile) => {\n  if (fs.existsSync(dotenvFile)) {\n    require(\"dotenv-expand\")(\n      require(\"dotenv\").config({\n        path: dotenvFile\n      })\n    )\n  }\n})\n\nif (process.env.APP_ROOT == null) {\n  process.env.APP_ROOT = appRoot.get()\n}\n\nif (process.env.APP_SOURCE == null) {\n  const sourceFolder = path.join(process.env.APP_ROOT, \"src\")\n  process.env.APP_SOURCE = fs.existsSync(sourceFolder) ? sourceFolder : process.env.APP_ROOT\n}\n\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in Webpack configuration.\nconst APP_SPECIFIC_ENV = /^APP_/i\n\nexport function getEnvironment() {\n  const raw = {}\n  Object.keys(process.env)\n    .filter((key) => APP_SPECIFIC_ENV.test(key))\n    .forEach((key) => {\n      raw[key] = process.env[key]\n    })\n\n  // Add core settings to raw data - which is not prefixed at all\n  raw.NODE_ENV = NODE_ENV\n\n  if (BUILD_TARGET) {\n    raw.BUILD_TARGET = BUILD_TARGET\n  }\n\n  // Add hint about root and source folders\n  raw.APP_ROOT = process.env.APP_ROOT\n  raw.APP_SOURCE = process.env.APP_SOURCE\n\n  // Stringify all values so we can feed into Webpack DefinePlugin\n  const stringified = {}\n  const webpack = { \"process.env\": stringified }\n  Object.keys(raw).forEach((key) => {\n    stringified[key] = JSON.stringify(raw[key])\n  })\n\n  return { raw, stringified, webpack }\n}\n"],"names":["dotEnvBase","path","join","appRoot","get","process","env","NODE_ENV","BUILD_TARGET","dotenvFiles","filter","Boolean","forEach","dotenvFile","fs","existsSync","require","config","APP_ROOT","APP_SOURCE","sourceFolder","APP_SPECIFIC_ENV","getEnvironment","raw","Object","keys","key","test","stringified","JSON","stringify","webpack"],"mappings":";;;;;;;;;;AAIA,IAAMA,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,MAAzB,CAAnB;;AAEA,IAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,QAAjB,EAA2B;EAIzBF,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,aAAvB;;;IAMIA,QAAQ,GAAGF,OAAO,CAACC,GAAR,CAAYC;IAGvBC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYE;IAM3BC,WAAW,GAAG,CAClBD,YAAY,IAAOR,UAAP,SAAqBQ,YAArB,SAAqCD,QAArC,WADM,EAElBC,YAAY,IAAOR,UAAP,SAAqBQ,YAArB,SAAqCD,QAF/B,EAGlBC,YAAY,IAAID,QAAQ,KAAK,MAA7B,IAA0CP,UAA1C,SAAwDQ,YAAxD,WAHkB,EAIlBA,YAAY,IAAOR,UAAP,SAAqBQ,YAJf,EAKfR,UALe,SAKDO,QALC,aAMfP,UANe,SAMDO,QANC,EAOlBA,QAAQ,KAAK,MAAb,IAA0BP,UAA1B,WAPkB,EAQlBA,UARkB,EASlBU,MATkB,CASXC,OATW;AAgBpBF,WAAW,CAACG,OAAZ,CAAoB,UAACC,UAAD,EAAgB;MAC9BC,EAAE,CAACC,UAAH,CAAcF,UAAd,CAAJ,EAA+B;IAC7BG,OAAO,CAAC,eAAD,CAAP,CACEA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;MACvBhB,IAAI,EAAEY;KADR,CADF;;CAFJ;;AAUA,IAAIR,OAAO,CAACC,GAAR,CAAYY,QAAZ,IAAwB,IAA5B,EAAkC;EAChCb,OAAO,CAACC,GAAR,CAAYY,QAAZ,GAAuBf,OAAO,CAACC,GAAR,EAAvB;;;AAGF,IAAIC,OAAO,CAACC,GAAR,CAAYa,UAAZ,IAA0B,IAA9B,EAAoC;MAC5BC,YAAY,GAAGnB,IAAI,CAACC,IAAL,CAAUG,OAAO,CAACC,GAAR,CAAYY,QAAtB,EAAgC,KAAhC,CAArB;EACAb,OAAO,CAACC,GAAR,CAAYa,UAAZ,GAAyBL,EAAE,CAACC,UAAH,CAAcK,YAAd,IAA8BA,YAA9B,GAA6Cf,OAAO,CAACC,GAAR,CAAYY,QAAlF;;;AAKF,IAAMG,gBAAgB,GAAG,QAAzB;AAEA,AAAO,SAASC,cAAT,GAA0B;MACzBC,GAAG,GAAG,EAAZ;EACAC,MAAM,CAACC,IAAP,CAAYpB,OAAO,CAACC,GAApB,EACGI,MADH,CACU,UAACgB,GAAD;WAASL,gBAAgB,CAACM,IAAjB,CAAsBD,GAAtB,CAAT;GADV,EAEGd,OAFH,CAEW,UAACc,GAAD,EAAS;IAChBH,GAAG,CAACG,GAAD,CAAH,GAAWrB,OAAO,CAACC,GAAR,CAAYoB,GAAZ,CAAX;GAHJ;EAOAH,GAAG,CAAChB,QAAJ,GAAeA,QAAf;;MAEIC,YAAJ,EAAkB;IAChBe,GAAG,CAACf,YAAJ,GAAmBA,YAAnB;;;EAIFe,GAAG,CAACL,QAAJ,GAAeb,OAAO,CAACC,GAAR,CAAYY,QAA3B;EACAK,GAAG,CAACJ,UAAJ,GAAiBd,OAAO,CAACC,GAAR,CAAYa,UAA7B;MAGMS,WAAW,GAAG,EApBW;EAsB/BJ,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBX,OAAjB,CAAyB,UAACc,GAAD,EAAS;IAChCE,WAAW,CAACF,GAAD,CAAX,GAAmBG,IAAI,CAACC,SAAL,CAAeP,GAAG,CAACG,GAAD,CAAlB,CAAnB;GADF;SAIO;IAAEH,GAAG,EAAHA,GAAF;IAAOK,WAAW,EAAXA,WAAP;IAAoBG,OAAO,EALlB;qBAAiBH;;GAKjC;;;;;"}